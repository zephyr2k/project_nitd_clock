#include<iostream>
#include<malloc.h>
using namespace std;
typedef struct PList
{
    char op;
    PList *next;
    int mobility;
    int vertex_no;
    int cStep=0;
    PList(char init_op)
    {
        op=init_op;
        next=NULL;
        mobility=0;
        vertex_no=0;
        cStep=0;
    }
    int toString()
    {
        cout<<"Op : "<<op<<"\t"<<vertex_no<<"<"<<mobility<<">\n";
    }
};
typedef struct Schedule
{
    int n_cSteps;
    int n_ops;
    PList **pOps;
    Schedule(int n_cS=0,int n_o=0)
    {
        n_cSteps=n_cS;
        n_ops=n_o;
        for(int i=0;i<n_ops;i++)
        {
        	pOps[i]=(PList*)malloc(n_ops*sizeof(PList));
        }
    }
    int insert_ready_ops(int V,int m)
    {

    }
    int schedule_op(Schedule *S,PList *tk,int Cstep)
    {

    }
    int toString()
    {
        for(int i=0;i<n_cSteps;i++)
        {
            for(int j=0;i<n_ops;j++)
            {
                if(pOps[j]->op!=' ' && pOps[j]->op!=NULL)
                    pOps[j]->toString();
            }
        }
        return 1;
    }
};
typedef struct AdjListNode
{
    int dest;
    AdjListNode* next;
};

// A structure to represent an adjacency liat
typedef struct AdjList
{
    AdjListNode *head;  // pointer to head node of list
};

// A structure to represent a graph. A graph is an array of adjacency lists.
// Size of array will be V (number of vertices in graph)
typedef struct Graph
{
    int V;
    AdjList* su;
    AdjList* pre;

};
// A utility function to create a new adjacency list node
AdjListNode* newAdjListNode(int dest)
{
    AdjListNode* newNode =
            (AdjListNode*) malloc(sizeof(AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// A utility function that creates a graph of V vertices
Graph* createGraph(int V)
{
    Graph* graph = (Graph*) malloc(sizeof(Graph));
    graph->V = V;

    // Create an array of adjacency lists.  Size of array will be V
    graph->su = (AdjList*) malloc(V * sizeof(AdjList));
    graph->pre = (AdjList*) malloc(V * sizeof(AdjList));

     // Initialize each adjacency list as empty by making head as NULL
    int i;
    for (i = 0; i < V; ++i){
        graph->su[i].head = NULL;
        graph->pre[i].head = NULL;
        }

    return graph;
}
int readGraph(Graph *G);

int main()
{
    /*int *arr;
    arr=new int[5];
    for(int i=0;i<5;i++)
        arr[i]=i+1;
     for(int i=0;i<5;i++)
        cout<<arr[i];
    */
    Schedule *currS=new Schedule(4,5);
    currS->toString();
    cout<<"\n";
    PList *p1,*p2;
    p1=new PList('+');
    p2=new PList('-');
    p1->next=p2;
    //cout<<p1->op<<"\t"<<p1->next->op<<"\n";
    p1->toString();
return 0;
}

