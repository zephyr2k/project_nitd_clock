
int t;
stack<int> f;



int te[100];
int s=0;
    int a,b,e,i,v;
for (v = 0; v < graph->V; ++v)
    {
        struct AdjListNode* pCrawl = graph->su[v].head;
        if(!pCrawl)
        {
            al[v]=1000;

    f.push(v);

        }

    }

while(!f.empty()){
struct AdjListNode* pCrawl = graph->pre[f.top()].head;
t=int(f.top());
f.pop();
while (pCrawl)
        {  if(pCrawl->dest){
if(al[int(pCrawl->dest)]==0)
            al[int(pCrawl->dest)]=al[t]-1;
            else
            {if(al[int(pCrawl->dest)]>al[t]-1)
           al[int(pCrawl->dest)]=al[t]-1;
}
            f.push(int(pCrawl->dest));}

            pCrawl = pCrawl->next;}

      //     f.pop();
           if(f.empty())
           break;

           }
    int m=10000;
    for(i=0;i<V;i++){if(al[i]!=0 && m>al[i])
    m=al[i];




    }
    al[0]=1000;
   struct AdjListNode* pCrawl = graph->su[0].head;
    if(pCrawl->dest)
    al[0]=al[pCrawl->dest]-1;
    m=10000;
    for(i=0;i<V;i++){if(m>al[i])
    m=al[i];




    }


    for(i=0;i<V;i++){
    al[i]=al[i]-m+1;

    printf("----alap-----%d %d\n",i+1,al[i]);
    }
